

-- | <fullname>AWS Lambda</fullname> <p><b>Overview</b></p> <p>This is the AWS Lambda API Reference. The AWS Lambda Developer Guide provides additional information. For the service overview, go to <a href="http://docs.aws.amazon.com/lambda/latest/dg/welcome.html">What is AWS Lambda</a>, and for information about how the service works, go to <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html">AWS LambdaL How it Works</a> in the AWS Lambda Developer Guide.</p>
module AWS.Lambda where

import Control.Monad.Aff (Aff)
import Data.Foreign.NullOrUndefined (NullOrUndefined)
import Data.Map (Map)
import Data.Unit (Unit, unit)

import AWS.Request as AWS

serviceName = "Lambda" :: String


-- | <p>Identifies a stream as an event source for an AWS Lambda function. It can be either an Amazon Kinesis stream or a Amazon DynamoDB stream. AWS Lambda invokes the specified function when records are posted to the stream.</p> <p>This is the pull model, where AWS Lambda invokes the function. For more information, go to <a href="http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html">AWS Lambda: How it Works</a> in the AWS Lambda Developer Guide.</p> <p>This association between an Amazon Kinesis stream and an AWS Lambda function is called the event source mapping. You provide the configuration information (for example, which stream to read from and which AWS Lambda function to invoke) for the event source mapping in the request body.</p> <p> Each event source, such as a Kinesis stream, can only be associated with one AWS Lambda function. If you call <a>AddEventSource</a> for an event source that is already mapped to another AWS Lambda function, the existing mapping is updated to call the new function instead of the old one. </p> <p>This operation requires permission for the <code>iam:PassRole</code> action for the IAM role. It also requires permission for the <code>lambda:AddEventSource</code> action.</p>
addEventSource :: forall eff. AddEventSourceRequest -> Aff (err :: AWS.RequestError | eff) EventSourceConfiguration
addEventSource = AWS.request serviceName "AddEventSource" 


-- | <p>Deletes the specified Lambda function code and configuration.</p> <p>This operation requires permission for the <code>lambda:DeleteFunction</code> action.</p>
deleteFunction :: forall eff. DeleteFunctionRequest -> Aff (err :: AWS.RequestError | eff) Unit
deleteFunction = AWS.request serviceName "DeleteFunction" 


-- | <p>Returns configuration information for the specified event source mapping (see <a>AddEventSource</a>).</p> <p>This operation requires permission for the <code>lambda:GetEventSource</code> action.</p>
getEventSource :: forall eff. GetEventSourceRequest -> Aff (err :: AWS.RequestError | eff) EventSourceConfiguration
getEventSource = AWS.request serviceName "GetEventSource" 


-- | <p>Returns the configuration information of the Lambda function and a presigned URL link to the .zip file you uploaded with <a>UploadFunction</a> so you can download the .zip file. Note that the URL is valid for up to 10 minutes. The configuration information is the same information you provided as parameters when uploading the function.</p> <p>This operation requires permission for the <code>lambda:GetFunction</code> action.</p>
getFunction :: forall eff. GetFunctionRequest -> Aff (err :: AWS.RequestError | eff) GetFunctionResponse
getFunction = AWS.request serviceName "GetFunction" 


-- | <p>Returns the configuration information of the Lambda function. This the same information you provided as parameters when uploading the function by using <a>UploadFunction</a>.</p> <p>This operation requires permission for the <code>lambda:GetFunctionConfiguration</code> operation.</p>
getFunctionConfiguration :: forall eff. GetFunctionConfigurationRequest -> Aff (err :: AWS.RequestError | eff) FunctionConfiguration
getFunctionConfiguration = AWS.request serviceName "GetFunctionConfiguration" 


-- | <p>Submits an invocation request to AWS Lambda. Upon receiving the request, Lambda executes the specified function asynchronously. To see the logs generated by the Lambda function execution, see the CloudWatch logs console.</p> <p>This operation requires permission for the <code>lambda:InvokeAsync</code> action.</p>
invokeAsync :: forall eff. InvokeAsyncRequest -> Aff (err :: AWS.RequestError | eff) InvokeAsyncResponse
invokeAsync = AWS.request serviceName "InvokeAsync" 


-- | <p>Returns a list of event source mappings you created using the <code>AddEventSource</code> (see <a>AddEventSource</a>), where you identify a stream as event source. This list does not include Amazon S3 event sources. </p> <p>For each mapping, the API returns configuration information. You can optionally specify filters to retrieve specific event source mappings.</p> <p>This operation requires permission for the <code>lambda:ListEventSources</code> action.</p>
listEventSources :: forall eff. ListEventSourcesRequest -> Aff (err :: AWS.RequestError | eff) ListEventSourcesResponse
listEventSources = AWS.request serviceName "ListEventSources" 


-- | <p>Returns a list of your Lambda functions. For each function, the response includes the function configuration information. You must use <a>GetFunction</a> to retrieve the code for your function.</p> <p>This operation requires permission for the <code>lambda:ListFunctions</code> action.</p>
listFunctions :: forall eff. ListFunctionsRequest -> Aff (err :: AWS.RequestError | eff) ListFunctionsResponse
listFunctions = AWS.request serviceName "ListFunctions" 


-- | <p>Removes an event source mapping. This means AWS Lambda will no longer invoke the function for events in the associated source.</p> <p>This operation requires permission for the <code>lambda:RemoveEventSource</code> action.</p>
removeEventSource :: forall eff. RemoveEventSourceRequest -> Aff (err :: AWS.RequestError | eff) Unit
removeEventSource = AWS.request serviceName "RemoveEventSource" 


-- | <p>Updates the configuration parameters for the specified Lambda function by using the values provided in the request. You provide only the parameters you want to change. This operation must only be used on an existing Lambda function and cannot be used to update the function's code. </p> <p>This operation requires permission for the <code>lambda:UpdateFunctionConfiguration</code> action.</p>
updateFunctionConfiguration :: forall eff. UpdateFunctionConfigurationRequest -> Aff (err :: AWS.RequestError | eff) FunctionConfiguration
updateFunctionConfiguration = AWS.request serviceName "UpdateFunctionConfiguration" 


-- | <p>Creates a new Lambda function or updates an existing function. The function metadata is created from the request parameters, and the code for the function is provided by a .zip file in the request body. If the function name already exists, the existing Lambda function is updated with the new code and metadata. </p> <p>This operation requires permission for the <code>lambda:UploadFunction</code> action.</p>
uploadFunction :: forall eff. UploadFunctionRequest -> Aff (err :: AWS.RequestError | eff) FunctionConfiguration
uploadFunction = AWS.request serviceName "UploadFunction" 


newtype AddEventSourceRequest = AddEventSourceRequest 
  { "EventSource" :: (String)
  , "FunctionName" :: (FunctionName)
  , "Role" :: (RoleArn)
  , "BatchSize" :: NullOrUndefined (Int)
  , "Parameters" :: NullOrUndefined (Map'')
  }


newtype DeleteFunctionRequest = DeleteFunctionRequest 
  { "FunctionName" :: (FunctionName)
  }


newtype Description = Description String


-- | <p>Describes mapping between an Amazon Kinesis stream and a Lambda function.</p>
newtype EventSourceConfiguration = EventSourceConfiguration 
  { "UUID" :: NullOrUndefined (String)
  , "BatchSize" :: NullOrUndefined (Int)
  , "EventSource" :: NullOrUndefined (String)
  , "FunctionName" :: NullOrUndefined (FunctionName)
  , "Parameters" :: NullOrUndefined (Map'')
  , "Role" :: NullOrUndefined (RoleArn)
  , "LastModified" :: NullOrUndefined (Number)
  , "IsActive" :: NullOrUndefined (Boolean)
  , "Status" :: NullOrUndefined (String)
  }


newtype EventSourceList = EventSourceList (Array EventSourceConfiguration)


newtype FunctionArn = FunctionArn String


-- | <p>The object for the Lambda function location.</p>
newtype FunctionCodeLocation = FunctionCodeLocation 
  { "RepositoryType" :: NullOrUndefined (String)
  , "Location" :: NullOrUndefined (String)
  }


-- | <p>A complex type that describes function metadata.</p>
newtype FunctionConfiguration = FunctionConfiguration 
  { "FunctionName" :: NullOrUndefined (FunctionName)
  , "FunctionARN" :: NullOrUndefined (FunctionArn)
  , "ConfigurationId" :: NullOrUndefined (String)
  , "Runtime" :: NullOrUndefined (Runtime)
  , "Role" :: NullOrUndefined (RoleArn)
  , "Handler" :: NullOrUndefined (Handler)
  , "Mode" :: NullOrUndefined (Mode)
  , "CodeSize" :: NullOrUndefined (Number)
  , "Description" :: NullOrUndefined (Description)
  , "Timeout" :: NullOrUndefined (Timeout)
  , "MemorySize" :: NullOrUndefined (MemorySize)
  , "LastModified" :: NullOrUndefined (Number)
  }


newtype FunctionList = FunctionList (Array FunctionConfiguration)


newtype FunctionName = FunctionName String


newtype GetEventSourceRequest = GetEventSourceRequest 
  { "UUID" :: (String)
  }


newtype GetFunctionConfigurationRequest = GetFunctionConfigurationRequest 
  { "FunctionName" :: (FunctionName)
  }


newtype GetFunctionRequest = GetFunctionRequest 
  { "FunctionName" :: (FunctionName)
  }


-- | <p>This response contains the object for AWS Lambda function location (see <a>API_FunctionCodeLocation</a></p>
newtype GetFunctionResponse = GetFunctionResponse 
  { "Configuration" :: NullOrUndefined (FunctionConfiguration)
  , "Code" :: NullOrUndefined (FunctionCodeLocation)
  }


newtype Handler = Handler String


newtype HttpStatus = HttpStatus Int


-- | <p>One of the parameters in the request is invalid. For example, if you provided an IAM role for AWS Lambda to assume in the <code>UploadFunction</code> or the <code>UpdateFunctionConfiguration</code> API, that AWS Lambda is unable to assume you will get this exception. </p>
newtype InvalidParameterValueException = InvalidParameterValueException 
  { "Type" :: NullOrUndefined (String)
  , "Message'" :: NullOrUndefined (String)
  }


-- | <p>The request body could not be parsed as JSON.</p>
newtype InvalidRequestContentException = InvalidRequestContentException 
  { "Type" :: NullOrUndefined (String)
  , "Message'" :: NullOrUndefined (String)
  }


newtype InvokeAsyncRequest = InvokeAsyncRequest 
  { "FunctionName" :: (FunctionName)
  , "InvokeArgs" :: (String)
  }


-- | <p>Upon success, it returns empty response. Otherwise, throws an exception.</p>
newtype InvokeAsyncResponse = InvokeAsyncResponse 
  { "Status" :: NullOrUndefined (HttpStatus)
  }


newtype ListEventSourcesRequest = ListEventSourcesRequest 
  { "EventSourceArn" :: NullOrUndefined (String)
  , "FunctionName" :: NullOrUndefined (FunctionName)
  , "Marker" :: NullOrUndefined (String)
  , "MaxItems" :: NullOrUndefined (MaxListItems)
  }


-- | <p>Contains a list of event sources (see <a>API_EventSourceConfiguration</a>)</p>
newtype ListEventSourcesResponse = ListEventSourcesResponse 
  { "NextMarker" :: NullOrUndefined (String)
  , "EventSources" :: NullOrUndefined (EventSourceList)
  }


newtype ListFunctionsRequest = ListFunctionsRequest 
  { "Marker" :: NullOrUndefined (String)
  , "MaxItems" :: NullOrUndefined (MaxListItems)
  }


-- | <p>Contains a list of AWS Lambda function configurations (see <a>API_FunctionConfiguration</a>.</p>
newtype ListFunctionsResponse = ListFunctionsResponse 
  { "NextMarker" :: NullOrUndefined (String)
  , "Functions" :: NullOrUndefined (FunctionList)
  }


newtype Map'' = Map'' (Map String String)


newtype MaxListItems = MaxListItems Int


newtype MemorySize = MemorySize Int


newtype Mode = Mode String


newtype RemoveEventSourceRequest = RemoveEventSourceRequest 
  { "UUID" :: (String)
  }


-- | <p>The function or the event source specified in the request does not exist.</p>
newtype ResourceNotFoundException = ResourceNotFoundException 
  { "Type" :: NullOrUndefined (String)
  , "Message" :: NullOrUndefined (String)
  }


newtype RoleArn = RoleArn String


newtype Runtime = Runtime String


-- | <p>The AWS Lambda service encountered an internal error.</p>
newtype ServiceException = ServiceException 
  { "Type" :: NullOrUndefined (String)
  , "Message" :: NullOrUndefined (String)
  }


newtype Timeout = Timeout Int


newtype UpdateFunctionConfigurationRequest = UpdateFunctionConfigurationRequest 
  { "FunctionName" :: (FunctionName)
  , "Role" :: NullOrUndefined (RoleArn)
  , "Handler" :: NullOrUndefined (Handler)
  , "Description" :: NullOrUndefined (Description)
  , "Timeout" :: NullOrUndefined (Timeout)
  , "MemorySize" :: NullOrUndefined (MemorySize)
  }


newtype UploadFunctionRequest = UploadFunctionRequest 
  { "FunctionName" :: (FunctionName)
  , "FunctionZip" :: (String)
  , "Runtime" :: (Runtime)
  , "Role" :: (RoleArn)
  , "Handler" :: (Handler)
  , "Mode" :: (Mode)
  , "Description" :: NullOrUndefined (Description)
  , "Timeout" :: NullOrUndefined (Timeout)
  , "MemorySize" :: NullOrUndefined (MemorySize)
  }
